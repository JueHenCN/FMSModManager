@page "/local-mods/culture/{ModName}"
@using FMSModManager.Core.Events
@using FMSModManager.Core.Services
@using FMSModManager.Core.Models
@using FMSModManager.Core.Services.Interface
@using FMSModManager.Pages.Pages.Components
@using Force.DeepCloner
@using System.Collections.ObjectModel
@inject IEventAggregator EventAggregator
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject ICultureModService CultureModService
@inject LanguageService Lang


<MudText Typo="Typo.h4" Class="mb-4">Mod名称: @ModName</MudText>

@if (_cultureDetail == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudPaper Class="pa-4">
        <MudToolBar Dense="true">
            <MudSpacer />
            <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                @if (_isEdit)
                {
                    <MudButton OnClick="@(OnEditCancelClick)" StartIcon="@Icons.Material.Filled.Cancel">
                        @Lang.GetText("Cancel")
                    </MudButton>
                    <MudButton OnClick="@(OnEditSaveClick)" StartIcon="@Icons.Material.Filled.Save">
                        @Lang.GetText("Save")
                    </MudButton>
                }
                else
                {
                    <MudButton OnClick="@(OnEditClick)" StartIcon=@Icons.Material.Filled.Edit>@Lang.GetText("Edit"))</MudButton>
                }
            </MudButtonGroup>
        </MudToolBar>


        <MudTabs>
            <MudTabPanel Text="@Lang.GetText("StateName", "CultureModDetail")">
                <MudToolBar>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchStateNameString" Placeholder="查找Key" Adornment="Adornment.Start" Immediate="true"
                        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>

                </MudToolBar>
                @if (_isEdit)
                {
                    <MudToolBar Dense="true" Class="mb-2">
                        <MudButton Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Disabled="@(!_selectedStateNames.Any())">
                            删除选中项
                        </MudButton>
                        <MudSpacer />
                        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@(OnAddNewStateNameClick)">
                            添加新的国家
                        </MudButton>
                    </MudToolBar>
                }
                <MudDataGrid 
                    Items="@(_isEdit ? _cultureEdit.StateNames : _cultureDetail.StateNames)" 
                    Hover="true" Dense="true" ReadOnly="!_isEdit" EditMode="DataGridEditMode.Cell"
                    MultiSelection="true" QuickFilter="@_quickFilterStateName" 
                    @bind-SelectedItems="@_selectedStateNames"
                    SelectOnRowClick="false">
                    <Columns>
                        @if (_isEdit)
                        {
                            <SelectColumn T="TextEntity" />
                        }
                        <PropertyColumn Property="x => x.Key" Title="Key"/>
                        <PropertyColumn Property="x => x.Chinese" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.English" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.TraditionalChinese" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.Russian" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.SpanishSpain" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.PortugueseBrazil" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.German" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.Japanese" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.French" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.Polish" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.SpanishLatinAmerica" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.PortuguesePortugal" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.Korean" Required="false" Sortable="false"/>
                    </Columns>

                    <PagerContent>
                        <MudDataGridPager T="TextEntity" RowsPerPageString="每页显示" />
                    </PagerContent>
                </MudDataGrid>
            </MudTabPanel>

            <MudTabPanel Text="城市名称">
                <MudToolBar>
                    <MudSpacer />
                    <MudTextField @bind-Value="_searchCityNameString" Placeholder="查找Key" Adornment="Adornment.Start" Immediate="true"
                        AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </MudToolBar>
                @if (_isEdit)
                {
                    <MudToolBar Dense="true" Class="mb-2">
                        <MudButton Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete" Disabled="@(!_selectedCityNames.Any())">
                            删除选中项
                        </MudButton>
                        <MudSpacer />
                        <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add">
                            添加新的城市
                        </MudButton>
                    </MudToolBar>
                }
                <MudDataGrid 
                    Items="@(_isEdit ? _cultureEdit.CityNames : _cultureDetail.CityNames)" 
                    Hover="true" Dense="true" ReadOnly="!_isEdit" EditMode="DataGridEditMode.Cell"
                    MultiSelection="true" QuickFilter="@_quickFilterCityName" 
                    @bind-SelectedItems="@_selectedCityNames"
                    SelectOnRowClick="false">
                    <Columns>
                        @if (_isEdit)
                        {
                            <SelectColumn T="TextEntity"/>
                        }
                        <PropertyColumn Property="x => x.Key" Title="Key"/>
                        <PropertyColumn Property="x => x.Chinese" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.English" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.TraditionalChinese" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.Russian" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.SpanishSpain" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.PortugueseBrazil" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.German" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.Japanese" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.French" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.Polish" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.SpanishLatinAmerica" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.PortuguesePortugal" Required="false" Sortable="false"/>
                        <PropertyColumn Property="x => x.Korean" Required="false" Sortable="false"/>
                    </Columns>

                    <PagerContent>
                        <MudDataGridPager T="TextEntity" RowsPerPageString="每页显示" />
                    </PagerContent>
                </MudDataGrid>
            </MudTabPanel>
        </MudTabs>
    </MudPaper>
}

@code {
    [Parameter] public string ModName { get; set; }

    private bool _isEdit = false;
    private string _searchStateNameString = "";
    private string _searchCityNameString = "";
    private CultureModModel? _cultureDetail;
    private CultureModModel? _cultureEdit;
    private HashSet<TextEntity> _selectedCityNames = new HashSet<TextEntity>();
    private HashSet<TextEntity> _selectedStateNames = new HashSet<TextEntity>();

    private int[] pageList = new int[] { 10, 20, 50, 100 };

    private Func<TextEntity, bool> _quickFilterStateName => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchStateNameString))
            return true;
        
        if (x.Key.Contains(_searchStateNameString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    private Func<TextEntity, bool> _quickFilterCityName => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchCityNameString))
            return true;
        
        if (x.Key.Contains(_searchCityNameString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    };

    private async void OnAddNewStateNameClick()
    {
        var parameters = new DialogParameters()
        {
            { "DialogTitle", "添加新的国家" },
            { "ContentText", "添加新的国家" }
        };
        var dialog = DialogService.Show<AddNewTextEntityDialog>("添加新的国家", parameters);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data != null)
        {
            var data = result.Data as ObservableCollection<TextEntity>;
            foreach (var item in data)
            {
                _cultureEdit.StateNames.Add(item);
            }
            StateHasChanged();
        }
    }

    protected override void OnInitialized()
    {
        LoadData();
        EventAggregator.GetEvent<LanguageChangedEvent>().Subscribe(OnLanguageChanged);
    }

    protected override void OnParametersSet() { LoadData(); }

    private void OnLanguageChanged(string language)
    {
        LoadData();
        StateHasChanged();
    }

    private void OnEditClick()
    {
        _isEdit = true;
        _cultureEdit = CultureModService.GetCultureMod(ModName).DeepClone();
    }

    private void OnEditCancelClick()
    {
        _isEdit = false;
    }

    private void OnEditSaveClick()
    {
        try
        {
            // 检查重复Key
            var duplicateKey = _cultureEdit?.StateNames.GroupBy(x => x.Key).Where(g => g.Count() > 1).Select(g => g.Key).FirstOrDefault();
            if (duplicateKey != null)
            {
                Snackbar.Add($"Key重复: {duplicateKey}", Severity.Error);
                return;
            }
            
            _isEdit = false;
            CultureModService.UpdateCultureMod(ModName, _cultureEdit);
            _cultureDetail = _cultureEdit;
            Snackbar.Add("保存成功", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"保存失败: {ex.Message}", Severity.Error);
        }
    }

    private void LoadData()
    {
        try
        {
            _cultureDetail = CultureModService.GetCultureMod(ModName).DeepClone();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载失败: {ex.Message}", Severity.Error);
            NavigationManager.NavigateTo("/");
        }
    }

    private string GetTranslation<T>(T item, string language) where T : class
    {
        var translations = item.GetType().GetProperty("Translations")?.GetValue(item) as Dictionary<string, string>;
        return translations?.GetValueOrDefault(language, "") ?? "";
    }
}
