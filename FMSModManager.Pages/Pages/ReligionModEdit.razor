@page "/local-mods/religion/{ModName}/edit"
@using FMSModManager.Core.Services
@using FMSModManager.Pages.Pages.Components
@using Prism.Events
@using FMSModManager.Core.Events
@using FMSModManager.Pages.Components
@inject ReligionService ReligionService
@inject LocalizationService LocalizationService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IEventAggregator EventAggregator

<MudText Typo="Typo.h4" Class="mb-4">编辑 @ModName</MudText>

@if (_religions == null || _localizations == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudPaper Class="pa-4">
        <MudContainer Style="max-height: 70vh; overflow-y: auto">
            <MudExpansionPanels>
                @if (!_religions.Any())
                {
                    <MudAlert Severity="Severity.Info" Class="mb-4">
                        <MudText>当前 Mod 中没有宗教信息</MudText>
                        <MudText Typo="Typo.body2">点击下方的"添加新宗教"按钮来创建一个新的宗教</MudText>
                    </MudAlert>
                }

                @foreach (var religion in _religions)
                {
                    <MudExpansionPanel>
                        <TitleContent>
                            <div class="d-flex align-center">
                                <MudText>
                                    <MudIcon Icon="@Icons.Material.Filled.TempleBuddhist" Class="mr-2"/>
                                    @GetLocalizedText(religion.Name, "Chinese")
                                </MudText>
                                <MudText Typo="Typo.body2" Class="ml-8">
                                    @GetLocalizedText(religion.Description, "Chinese")
                                </MudText>
                                <MudSpacer />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                             Color="Color.Error" 
                                             OnClick="@(() => DeleteReligion(religion))"
                                             Size="Size.Small" />
                            </div>
                        </TitleContent>
                        <ChildContent>
                            <MudTabs>
                                <MudTabPanel Text="基本信息">
                                    <MudTextField @bind-Value="religion.Name" Label="宗教名称键" Class="mt-3"/>
                                    <MudTextField @bind-Value="religion.Description" Label="描述键" Class="mt-3"/>
                                    <MudTextField @bind-Value="religion.HolyBookName" Label="圣典名称键" Class="mt-3"/>
                                    
                                    <MudText Typo="Typo.subtitle1" Class="mt-4">修行方式键</MudText>
                                    @foreach (var (practice, index) in religion.Practices.Select((p, i) => (p, i)))
                                    {
                                        var i = index;
                                        <MudTextField @bind-Value="religion.Practices[i]" Label="@($"修行方式 {i + 1}")" Class="mt-2"/>
                                    }
                                    <MudButton OnClick="@(() => religion.Practices.Add(""))" 
                                             StartIcon="@Icons.Material.Filled.Add" 
                                             Color="Color.Primary" 
                                             Class="mt-2">
                                        添加修行方式
                                    </MudButton>
                                </MudTabPanel>
                                <MudTabPanel Text="本地化">
                                    <MudTabs Elevation="0" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-3">
                                        @foreach (var lang in _languages)
                                        {
                                            <MudTabPanel Text="@lang">
                                                <MudTextField @bind-Value="_localizations[religion.Name][lang]" 
                                                            Label="宗教名称" Class="mt-3"/>
                                                <MudTextField @bind-Value="_localizations[religion.Description][lang]" 
                                                            Label="描述" Class="mt-3" Lines="3"/>
                                                <MudTextField @bind-Value="_localizations[religion.HolyBookName][lang]" 
                                                            Label="圣典名称" Class="mt-3"/>
                                                
                                                <MudText Typo="Typo.subtitle1" Class="mt-4">修行方式</MudText>
                                                @foreach (var practice in religion.Practices)
                                                {
                                                    <MudTextField @bind-Value="_localizations[practice][lang]" 
                                                                Label="修行方式" Class="mt-2"/>
                                                }
                                            </MudTabPanel>
                                        }
                                    </MudTabs>
                                </MudTabPanel>
                            </MudTabs>
                        </ChildContent>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>

            <MudButton
                      OnClick="@(async () => await AddNewReligion())"
                      StartIcon="@Icons.Material.Filled.Add" 
                      Color="Color.Primary" 
                      Class="mt-4 mb-2" 
                      FullWidth="true">
                添加新宗教
            </MudButton>
        </MudContainer>
        
        <MudDivider Class="my-4"/>
        
        <MudToolBar Dense="true">
            <MudSpacer />
            <MudButton OnClick="@(() => NavigationManager.NavigateTo($"/local-mods/religion/{ModName}"))">
                取消
            </MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit">
                保存
            </MudButton>
        </MudToolBar>
    </MudPaper>
}

@code {
    [Parameter] public string ModName { get; set; }
    
    private List<Religion> _religions;
    private Dictionary<string, Dictionary<string, string>> _localizations;
    
    private readonly List<string> _languages = new()
    {
        "Chinese",
        "TraditionalChinese",
        "English",
        "Russian",
        "SpanishSpain",
        "PortugueseBrazil",
        "German",
        "Japanese",
        "French",
        "Polish",
        "SpanishLatinAmerica",
        "PortuguesePortugal",
        "Korean",
        "Turkish"
    };

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        try
        {
            var data = ReligionService.ReadReligion(ModName);
            _religions = data.Religions;
            
            try
            {
                _localizations = LocalizationService.ReadLocalization(ModName, "Religion");
            }
            catch
            {
                _localizations = new Dictionary<string, Dictionary<string, string>>();
            }
            
            // 确保所有键都存在
            foreach (var religion in _religions)
            {
                EnsureLocalizationKeyExists(religion.Name);
                EnsureLocalizationKeyExists(religion.Description);
                EnsureLocalizationKeyExists(religion.HolyBookName);
                
                foreach (var practice in religion.Practices)
                {
                    EnsureLocalizationKeyExists(practice);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载失败: {ex.Message}", Severity.Error);
            NavigationManager.NavigateTo("/");
        }
    }

    private void EnsureLocalizationKeyExists(string key)
    {
        if (!_localizations.ContainsKey(key))
        {
            _localizations[key] = _languages.ToDictionary(lang => lang, _ => "");
        }
    }

    private string GetLocalizedText(string key, string language)
    {
        if (string.IsNullOrEmpty(key)) return "";

        if (_localizations.TryGetValue(key, out var translations) && 
            translations.TryGetValue(language, out var text))
        {
            return string.IsNullOrEmpty(text) ? key : text;
        }
        return key;
    }

    private async Task AddNewReligion()
    {
        var dialogParameters = new DialogParameters
        {
            { "ContentText", "请输入宗教名称键" },
            { "ButtonText", "添加" },
            { "Color", Color.Primary }
        };

        var dialog = DialogService.Show<InputTextDialog>("添加新宗教", dialogParameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string religionKey && !string.IsNullOrWhiteSpace(religionKey))
        {
            var religion = new Religion
            {
                Name = religionKey,
                Description = $"{religionKey}Description",
                HolyBookName = $"{religionKey}HolyBookName",
                Practices = new List<string> { $"{religionKey}Practice1" }
            };

            EnsureLocalizationKeyExists(religion.Name);
            EnsureLocalizationKeyExists(religion.Description);
            EnsureLocalizationKeyExists(religion.HolyBookName);
            foreach (var practice in religion.Practices)
            {
                EnsureLocalizationKeyExists(practice);
            }

            _religions.Add(religion);
            StateHasChanged();
        }
    }

    private async Task DeleteReligion(Religion religion)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"确定要删除宗教 {GetLocalizedText(religion.Name, "Chinese")} 吗？" },
            { "ButtonText", "删除" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<ConfirmDialog>("确认删除", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            // 删除本地化数据
            _localizations.Remove(religion.Name);
            _localizations.Remove(religion.Description);
            _localizations.Remove(religion.HolyBookName);
            foreach (var practice in religion.Practices)
            {
                _localizations.Remove(practice);
            }

            // 删除宗教数据
            _religions.Remove(religion);
            StateHasChanged();
        }
    }

    private void Submit()
    {
        try
        {
            var result = new ReligionFile { Religions = _religions };
            ReligionService.WriteReligion(ModName, result);
            LocalizationService.WriteLocalization(ModName, "Religion", _localizations);
            EventAggregator.GetEvent<ModsChangedEvent>().Publish();
            Snackbar.Add("保存成功", Severity.Success);
            NavigationManager.NavigateTo($"/local-mods/religion/{ModName}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"保存失败: {ex.Message}", Severity.Error);
        }
    }
} 