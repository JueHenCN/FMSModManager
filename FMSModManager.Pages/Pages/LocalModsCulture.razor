@page "/local-mods/culture"
@using FMSModManager.Core.Services
@using FMSModManager.Core.Services.Interface
@using FMSModManager.Pages.Pages.Components
@using Prism.Events
@using FMSModManager.Core.Events
@using FMSModManager.Pages.Components
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IEventAggregator EventAggregator
@inject ICultureModService CultureModService

<MudText Typo="Typo.h3" Class="mb-4">本地文化 Mod 管理</MudText>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudToolBar Dense="true">
                <MudText Typo="Typo.h5">已安装的文化 Mod</MudText>
                <MudSpacer />
                <MudButton Color="Color.Primary" 
                StartIcon="@Icons.Material.Filled.Add"
                OnClick="CreateNewMod">
                    新建 Mod
                </MudButton>
            </MudToolBar>

            @if (_cultures == null)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            else if (!_cultures.Any())
            {
                <MudAlert Severity="Severity.Info">未找到任何文化 Mod</MudAlert>
            }
            else
            {
                <MudTable Items="@_cultures" Dense="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Mod 名称</MudTh>
                        <MudTh>城市数量</MudTh>
                        <MudTh>政治体系数量</MudTh>
                        <MudTh>州名数量</MudTh>
                        <MudTh>操作</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Mod 名称">@context</MudTd>
                        <MudTd DataLabel="城市数量">
                            @try
                            {
                                @(CultureModService.GetCultureMod(context)?.CityNames.Count ?? 0)
                            }
                            catch
                            {
                                <MudChip Color="Color.Error" Size="Size.Small">读取错误</MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="政治体系数量">
                            @try
                            {
                                @(CultureModService.GetCultureMod(context)?.PoliticalSystems.Count ?? 0)
                            }
                            catch
                            {
                                <MudChip Color="Color.Error" Size="Size.Small">读取错误</MudChip>
                            }
                        </MudTd>
                        <MudTd DataLabel="州名数量">
                            @try
                            {
                                @(CultureModService.GetCultureMod(context)?.StateNames.Count ?? 0)
                            }
                            catch
                            {
                                <MudChip Color="Color.Error" Size="Size.Small">读取错误</MudChip>
                            }
                        </MudTd>
                        <MudTd>
                            <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                <MudButton OnClick="@(() => NavigationManager.NavigateTo($"/local-mods/culture/{context}"))">查看</MudButton>
                                <MudButton OnClick="@(() => NavigationManager.NavigateTo($"/local-mods/culture/{context}/edit"))">编辑</MudButton>
                                <MudButton Color="Color.Error" OnClick="@(() => DeleteCulture(context))">删除</MudButton>
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private List<string> _cultures;
    private IEnumerable<string> _pagedData;
    private MudTable<string> _table;

    protected override void OnInitialized()
    {
        LoadCultures(); // 新增此行
        EventAggregator.GetEvent<ModsChangedEvent>().Subscribe(LoadCultures);
    }

    public void Dispose()
    {
        EventAggregator.GetEvent<ModsChangedEvent>().Unsubscribe(LoadCultures);
    }

    private void LoadCultures()
    {
        StateHasChanged();
        _cultures = CultureModService.GetAvailableCultureMods();
        if (_table != null)
            _table.ReloadServerData();

    }

    private async Task CreateNewMod()
    {
        var parameters = new DialogParameters();

        var options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = DialogService.Show<NewCultrueDialog>("新建 Mod", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var modName = result.Data.ToString();
            try
            {
                // 调用服务创建新 Mod
                var createResult = CultureModService.CreateCultureMod(modName);

                if (createResult != null)
                {
                    Snackbar.Add($"'{modName}' 创建成功", Severity.Success);
                    EventAggregator.GetEvent<ModsChangedEvent>().Publish();
                    //NavigationManager.NavigateTo($"/local-mods/culture/{modName}/detail");
                }
                else
                {
                    Snackbar.Add("创建失败，请检查日志", Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"创建失败: {ex.Message}", Severity.Error);
            }
        }
        
    }

    private async Task DeleteCulture(string modName)
    {
        bool? result = await DialogService.ShowMessageBox(
            "确认删除",
            $"确定要删除 {modName} 吗？此操作不可恢复。",
            yesText: "删除",
            noText: "取消"
        );

        if (result ?? false)
        {
            try
            {
                var delResult = CultureModService.DeleteCultureMod(modName);
                if (delResult)
                    Snackbar.Add("Mod 删除成功", Severity.Success);
                else
                    Snackbar.Add("Mod 删除失败", Severity.Error);
                EventAggregator.GetEvent<ModsChangedEvent>().Publish();
            }
            catch (Exception ex)

            {
                Snackbar.Add($"删除失败: {ex.Message}", Severity.Error);
            }
        }
    }
}
