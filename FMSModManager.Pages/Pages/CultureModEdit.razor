@page "/local-mods/culture/{ModName}/edit"
@using FMSModManager.Core.Services
@using FMSModManager.Core.Models
@using FMSModManager.Core.Services.Interface
@using FMSModManager.Pages.Components
@using Prism.Events
@using FMSModManager.Core.Events
@using MudBlazor
@inject LocalizationService LocalizationService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inject IEventAggregator EventAggregator
@inject LanguageService Lang
@inject ICultureModService CultureModService

<MudText Typo="Typo.h4" Class="mb-4">编辑 @ModName</MudText>

@if (_culture == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudPaper Class="pa-4">
        <MudContainer Style="max-height: 70vh; overflow-y: auto">
            <MudTabs>
                <MudTabPanel Text="城市名称">
                    <MudToolBar Dense="true" Class="mb-2">
                        <MudButton Color="Color.Error" 
                                 StartIcon="@Icons.Material.Filled.Delete"
                                 OnClick="DeleteSelectedCityNames"
                                 Disabled="@(!_selectedCityNames.Any())">
                            删除选中项
                        </MudButton>
                        <MudSpacer />
                        <MudButton Color="Color.Primary"
                                 StartIcon="@Icons.Material.Filled.PlaylistAdd"
                                 OnClick="BatchAddCityNames"
                                 Class="mr-2">
                            批量添加
                        </MudButton>
                        <MudButton Color="Color.Primary" 
                                 StartIcon="@Icons.Material.Filled.Add"
                                 OnClick="AddNewCityName">
                            添加城市名称
                        </MudButton>
                    </MudToolBar>
                    <MudDataGrid Items="@_culture.CityNames" Dense="true" Hover="true" Bordered="true" ReadOnly="false" EditMode="DataGridEditMode.Cell"
                             Breakpoint="Breakpoint.Sm">
                        <Columns>
                            <SelectColumn />
                            <PropertyColumn Property="x => x.Key" Title="Key" StickyLeft="true" />
                            <PropertyColumn Property="x => x.Chinese" />
                            <PropertyColumn Property="x => x.English" />
                            <PropertyColumn Property="x => x.TraditionalChinese" />
                            <PropertyColumn Property="x => x.Russian" />
                            <PropertyColumn Property="x => x.SpanishSpain" />
                            <PropertyColumn Property="x => x.PortugueseBrazil" />
                            <PropertyColumn Property="x => x.German" />
                            <PropertyColumn Property="x => x.Japanese" />
                            <PropertyColumn Property="x => x.French" />
                            <PropertyColumn Property="x => x.Polish" />
                            <PropertyColumn Property="x => x.SpanishLatinAmerica" />
                            <PropertyColumn Property="x => x.PortuguesePortugal" />
                            <PropertyColumn Property="x => x.Korean" />
                        </Columns>
                        
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 10, 20, 50, 100 }"
                                         RowsPerPageString="每页显示:"
                                         InfoFormat="{first_item}-{last_item} / {all_items}" />
                        </PagerContent>
                    </MudDataGrid>
                </MudTabPanel>

                <MudTabPanel Text="国家名称">
                    <MudToolBar Dense="true" Class="mb-2">
                        <MudButton Color="Color.Error" 
                                 StartIcon="@Icons.Material.Filled.Delete"
                                 OnClick="DeleteSelectedStateNames"
                                 Disabled="@(!_selectedStateNames.Any())">
                            删除选中项
                        </MudButton>
                        <MudSpacer />
                        <MudButton Color="Color.Primary"
                                 StartIcon="@Icons.Material.Filled.PlaylistAdd"
                                 OnClick="BatchAddStateNames"
                                 Class="mr-2">
                            批量添加
                        </MudButton>
                        <MudButton Color="Color.Primary" 
                                 StartIcon="@Icons.Material.Filled.Add"
                                 OnClick="AddNewStateName">
                            添加国家名称
                        </MudButton>
                    </MudToolBar>
                    <MudDataGrid Items="@_culture.StateNames" Dense="true" Hover="true" Bordered="true"
                             Breakpoint="Breakpoint.Sm">
                        <Columns>
                            <PropertyColumn Property="x => x.Key" Title="Key" />
                            <PropertyColumn Property="x => x.Chinese" />
                            <PropertyColumn Property="x => x.English" />
                            <PropertyColumn Property="x => x.TraditionalChinese" />
                            <PropertyColumn Property="x => x.Russian" />
                            <PropertyColumn Property="x => x.SpanishSpain" />
                            <PropertyColumn Property="x => x.PortugueseBrazil" />
                            <PropertyColumn Property="x => x.German" />
                            <PropertyColumn Property="x => x.Japanese" />
                            <PropertyColumn Property="x => x.French" />
                            <PropertyColumn Property="x => x.Polish" />
                            <PropertyColumn Property="x => x.SpanishLatinAmerica" />
                            <PropertyColumn Property="x => x.PortuguesePortugal" />
                            <PropertyColumn Property="x => x.Korean" />
                        </Columns>
                        
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 10, 20, 50, 100 }"
                                         RowsPerPageString="每页显示:"
                                         InfoFormat="{first_item}-{last_item} / {all_items}" />
                        </PagerContent>
                    </MudDataGrid>
                </MudTabPanel>
            </MudTabs>
        </MudContainer>

        <MudDivider Class="my-4"/>
        
        <MudToolBar Dense="true">
            <MudSpacer />
            <MudButton OnClick="@(() => NavigationManager.NavigateTo($"/local-mods/culture/{ModName}"))">
                取消
            </MudButton>
            <MudButton Color="Color.Primary" OnClick="Submit">
                保存
            </MudButton>
        </MudToolBar>
    </MudPaper>
}

@code {
    [Parameter] public string ModName { get; set; }
    
    private CultureModModel _culture;
    private HashSet<TextEntry> _selectedCityNames = new();
    private HashSet<TextEntry> _selectedStateNames = new();
    private Dictionary<string, string> _languages = new();

    protected override void OnInitialized()
    {
        LoadData();
    }

    private void LoadData()
    {
        try
        {
            _culture = CultureModService.GetCultureMod(ModName);
            _languages = LocalizationService.GetLanguages();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"加载失败: {ex.Message}", Severity.Error);
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task AddNewCityName()
    {
        var dialogParameters = new DialogParameters
        {
            { "ContentText", "请输入城市名称键" },
            { "ButtonText", "添加" },
            { "Color", Color.Primary }
        };

        var dialog = DialogService.Show<InputDialog>("添加新城市", dialogParameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string cityKey && !string.IsNullOrWhiteSpace(cityKey))
        {
            _culture.CityNames.Add(new TextEntry());
            StateHasChanged();
        }
    }

    private async Task AddNewPoliticalSystem()
    {
        var dialogParameters = new DialogParameters
        {
            { "ContentText", "请输入政治体系名称" },
            { "ButtonText", "添加" },
            { "Color", Color.Primary }
        };

        var dialog = DialogService.Show<InputDialog>("添加新政治体系", dialogParameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string systemName && !string.IsNullOrWhiteSpace(systemName))
        {
            _culture.PoliticalSystems.Add(systemName);
            StateHasChanged();
        }
    }

    private async Task AddNewStateName()
    {
        var dialogParameters = new DialogParameters
        {
            { "ContentText", "请输入州名称键" },
            { "ButtonText", "添加" },
            { "Color", Color.Primary }
        };

        var dialog = DialogService.Show<InputDialog>("添加新州名称", dialogParameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string stateKey && !string.IsNullOrWhiteSpace(stateKey))
        {
            _culture.StateNames.Add(new TextEntry());
            StateHasChanged();
        }
    }

    private async Task DeleteCityName(TextEntry cityName)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"确定要删除城市 {cityName.Key} 吗？" },
            { "ButtonText", "删除" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<ConfirmDialog>("确认删除", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _culture.CityNames.Remove(cityName);
            StateHasChanged();
        }
    }

    private async Task DeletePoliticalSystem(string system)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"确定要删除政治体系 {system} 吗？" },
            { "ButtonText", "删除" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<ConfirmDialog>("确认删除", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _culture.PoliticalSystems.Remove(system);
            StateHasChanged();
        }
    }

    private async Task DeleteStateName(TextEntry stateName)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"确定要删除州名称 {stateName.Key} 吗？" },
            { "ButtonText", "删除" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<ConfirmDialog>("确认删除", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            _culture.StateNames.Remove(stateName);
            StateHasChanged();
        }
    }

    private async Task Submit()
    {
        try
        {
            CultureModService.SaveStateNames(ModName);
            CultureModService.SaveCityNames(ModName);
            CultureModService.SavePoliticalSystems(ModName);

            EventAggregator.GetEvent<ModsChangedEvent>().Publish();
            Snackbar.Add("保存成功", Severity.Success);
            //NavigationManager.NavigateTo($"/local-mods/culture/{ModName}");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"保存失败: {ex.Message}", Severity.Error);
        }
    }

    private void EnsureTranslationForCity(CityName cityName, string language)
    {
        if (!cityName.Translations.ContainsKey(language))
        {
            cityName.Translations[language] = "";
        }
    }

    private void EnsureTranslationForState(StateName stateName, string language)
    {
        if (!stateName.Translations.ContainsKey(language))
        {
            stateName.Translations[language] = "";
        }
    }

    private async Task DeleteSelectedCityNames()
    {
        if (!_selectedCityNames.Any()) return;

        var parameters = new DialogParameters
        {
            { "ContentText", $"确定要删除选中的 {_selectedCityNames.Count} 个城市吗？" },
            { "ButtonText", "删除" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<ConfirmDialog>("确认删除", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            foreach (var city in _selectedCityNames.ToList())
            {
                _culture.CityNames.Remove(city);
            }
            _selectedCityNames.Clear();
            StateHasChanged();
        }
    }

    private async Task BatchAddCityNames()
    {
        var parameters = new DialogParameters
        {
            { "Title", "批量添加城市名称" },
            { "ContentText", "每行一个城市名称键，例如：北京,上海,广州" },
            { "ButtonText", "添加" },
            { "Color", Color.Primary },
            { "Multiline", true },
            { "Lines", 10 }
        };

        var dialog = DialogService.Show<BatchInputDialog>("批量添加", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string input)
        {
            var keys = input.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(k => k.Trim())
                          .Where(k => !string.IsNullOrWhiteSpace(k));

            StateHasChanged();
        }
    }

    private async Task DeleteSelectedStateNames()
    {
        if (!_selectedStateNames.Any()) return;

        var parameters = new DialogParameters
        {
            { "ContentText", $"确定要删除选中的 {_selectedStateNames.Count} 个州吗？" },
            { "ButtonText", "删除" },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<ConfirmDialog>("确认删除", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            foreach (var state in _selectedStateNames.ToList())
            {
                _culture.StateNames.Remove(state);
            }
            _selectedStateNames.Clear();
            StateHasChanged();
        }
    }

    private async Task BatchAddStateNames()
    {
        var parameters = new DialogParameters
        {
            { "Title", "批量添加州名称" },
            { "ContentText", "每行一个州名称键，例如：\nBeijing\nShanghai\nGuangzhou" },
            { "ButtonText", "添加" },
            { "Color", Color.Primary },
            { "Multiline", true },
            { "Lines", 10 }
        };

        var dialog = DialogService.Show<BatchInputDialog>("批量添加", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is string input)
        {
            var keys = input.Split(new[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries)
                          .Select(k => k.Trim())
                          .Where(k => !string.IsNullOrWhiteSpace(k));

            
            StateHasChanged();
        }
    }
}
