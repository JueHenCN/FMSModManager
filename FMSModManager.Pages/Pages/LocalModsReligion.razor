@page "/local-mods/religion"
@using FMSModManager.Core.Services
@using Prism.Events
@using FMSModManager.Core.Events
@using FMSModManager.Pages.Components
@using FMSModManager.Pages.Layout
@inject ReligionService ReligionService
@inject LocalizationService LocalizationService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IEventAggregator EventAggregator

<MudText Typo="Typo.h3" Class="mb-4">本地宗教 Mod 管理</MudText>

<MudGrid>
    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudToolBar Dense="true">
                <MudText Typo="Typo.h5">已安装的宗教 Mod</MudText>
                <MudSpacer />
                <MudButton Color="Color.Primary" 
                          StartIcon="@Icons.Material.Filled.Add"
                          OnClick="CreateNewMod">
                    新建 Mod
                </MudButton>
            </MudToolBar>
            
            @if (_religions == null)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            else if (!_religions.Any())
            {
                <MudAlert Severity="Severity.Info">未找到任何宗教 Mod</MudAlert>
            }
            else
            {
                <MudTable Items="@_religions" Dense="true" Hover="true">
                    <HeaderContent>
                        <MudTh>Mod 名称</MudTh>
                        <MudTh>宗教数量</MudTh>
                        <MudTh>操作</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Mod 名称">@context</MudTd>
                        <MudTd DataLabel="宗教数量">
                            @try
                            {
                                @(ReligionService.ReadReligion(context).Religions.Count)
                            }
                            catch
                            {
                                <MudChip Color="Color.Error" Size="Size.Small">读取错误</MudChip>
                            }
                        </MudTd>
                        <MudTd>
                            <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                <MudButton OnClick="@(() => NavigationManager.NavigateTo($"/local-mods/religion/{context}"))">查看</MudButton>
                                <MudButton OnClick="@(() => NavigationManager.NavigateTo($"/local-mods/religion/{context}/edit"))">编辑</MudButton>
                                <MudButton Color="Color.Error" OnClick="@(() => DeleteReligion(context))">删除</MudButton>
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@if (_showDetails && _selectedReligionData != null)
{
    <MudDialog Open="@_showDetails" DisableSidePadding="true">
        <DialogContent>
            <MudContainer Style="max-height: 60vh; overflow-y: scroll">
                <MudList Dense="true">
                    @foreach (var religion in _selectedReligionData.Religions)
                    {
                        <MudListItem>
                            <MudText>
                                <MudIcon Icon="@Icons.Material.Filled.TempleBuddhist" Class="mr-2" />
                                @religion.Name
                            </MudText>
                            <MudText Typo="Typo.body2" Class="ml-8">
                                圣典: @religion.HolyBookName
                            </MudText>
                            <MudText Typo="Typo.body2" Class="ml-8">
                                修行方式: @string.Join(", ", religion.Practices)
                            </MudText>
                        </MudListItem>
                    }
                </MudList>
            </MudContainer>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="@(() => _showDetails = false)">关闭</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    private List<string> _religions;
    private bool _showDetails;
    private ReligionFile _selectedReligionData;

    protected override void OnInitialized()
    {
        LoadReligions();
        EventAggregator.GetEvent<ModsChangedEvent>().Subscribe(LoadReligions);
    }

    public void Dispose()
    {
        EventAggregator.GetEvent<ModsChangedEvent>().Unsubscribe(LoadReligions);
    }

    private void LoadReligions()
    {
        _religions = ReligionService.GetAvailableReligionMods();
    }

    private async Task CreateNewMod()
    {
        var parameters = new DialogParameters
        {
            { "IsNew", true },
            { "ModName", "" },
            { "Religions", new List<Religion>() }
        };

        var dialog = await DialogService.ShowAsync<ReligionModDialog>("创建新的宗教 Mod", parameters);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                var data = (dynamic)result.Data;
                ReligionService.WriteReligion(data.ModName, data.Data);
                LoadReligions();
                Snackbar.Add("Mod 创建成功", Severity.Success);
                NavigationManager.NavigateTo($"/local-mods/religion/{data.ModName}");
                EventAggregator.GetEvent<ModsChangedEvent>().Publish();
            }
            catch (Exception ex)
            {
                Snackbar.Add($"创建失败: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task DeleteReligion(string modName)
    {
        bool? result = await DialogService.ShowMessageBox(
            "确认删除",
            $"确定要删除 {modName} 吗？此操作不可恢复。",
            yesText: "删除",
            noText: "取消"
        );

        if (result ?? false)
        {
            try
            {
                ReligionService.DeleteReligion(modName);
                EventAggregator.GetEvent<ModsChangedEvent>().Publish();
                _religions.Remove(modName);
                Snackbar.Add("Mod 删除成功", Severity.Success);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"删除失败: {ex.Message}", Severity.Error);
            }
        }
    }
}
