@page "/local-mods/religion"
@using FMSModManager.Core.Services
@using FMSModManager.Core.Services.Interface
@using FMSModManager.Pages.Pages.Components
@using Prism.Events
@using FMSModManager.Core.Events
@using FMSModManager.Pages.Components
@using FMSModManager.Pages.Layout

@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@inject IEventAggregator EventAggregator
@inject IReligionModService ReligionModService
@inject LanguageService Lang
@implements IDisposable

<MudText Typo="Typo.h3" Class="mb-4">@Lang.GetText("Title", "LocalModsReligion")</MudText>

<MudGrid>

    <MudItem xs="12">
        <MudPaper Class="pa-4">
            <MudToolBar Dense="true">
                <MudText Typo="Typo.h5">@Lang.GetText("InstalledReligionMods", "LocalModsReligion")</MudText>
                <MudSpacer />
                <MudButton Color="Color.Primary" 

                          StartIcon="@Icons.Material.Filled.Add"
                          OnClick="CreateNewMod">
                    @Lang.GetText("CreateNewMod", "LocalModsReligion")
                </MudButton>
            </MudToolBar>

            
            @if (_religions == null)
            {
                <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            }
            else if (!_religions.Any())
            {
                <MudAlert Severity="Severity.Info">@Lang.GetText("NoReligionModsFound", "LocalModsReligion")</MudAlert>
            }
            else

            {
                <MudTable Items="@_religions" Dense="true" Hover="true">
                    <HeaderContent>
                        <MudTh>@Lang.GetText("ModName", "LocalModsReligion")</MudTh>
                        <MudTh>@Lang.GetText("ReligionCount", "LocalModsReligion")</MudTh>
                        <MudTh>@Lang.GetText("Operation", "LocalModsReligion")</MudTh>

                    </HeaderContent>
                    <RowTemplate>
                        @{
                            // Cache the mod data once per row to avoid multiple service calls
                            var modData = ReligionModService.GetReligionMod(context);
                        }
                        <MudTd DataLabel="@Lang.GetText("ModName", "LocalModsReligion")">@context</MudTd>
                        <MudTd DataLabel="@Lang.GetText("ReligionCount", "LocalModsReligion")">
                            @try
                            {
                                @(modData?.Religions.Count ?? 0)
                            }
                            catch
                            {
                                <MudChip Color="Color.Error" Size="Size.Small">@Lang.GetText("ReadError", "LocalModsReligion")</MudChip>
                            }
                        </MudTd>

                        <MudTd>
                            <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                                <MudButton OnClick="@(() => NavigationManager.NavigateTo($"/local-mods/religion/{context}"))">@Lang.GetText("View", "LocalModsReligion")</MudButton>
                                <MudButton Color="Color.Error" OnClick="@(() => DeleteReligion(context))">@Lang.GetText("Delete", "LocalModsReligion")</MudButton>
                            </MudButtonGroup>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private List<string> _religions;

    protected override void OnInitialized()
    {
        LoadReligions();
        EventAggregator.GetEvent<ModsChangedEvent>().Subscribe(LoadReligions);
    }


    public void Dispose()
    {
        EventAggregator.GetEvent<ModsChangedEvent>().Unsubscribe(LoadReligions);
    }

    private void LoadReligions()
    {
        _religions = ReligionModService.GetAvailableReligionMods();
    }

    private async Task CreateNewMod()
    {
        var parameters = new DialogParameters()
        {
            { "ContentText", Lang.GetText("CreateNewMod", "LocalModsReligion") },
            { "DialogTitle", Lang.GetText("CreateNewMod", "LocalModsReligion") }
        };

        var options = new DialogOptions()
            {
                CloseOnEscapeKey = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };


        var dialog = DialogService.Show<InputTextDialog>($"{Lang.GetText("Create", "LocalModsReligion")} Mod", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var modName = result.Data.ToString();
            if (string.IsNullOrWhiteSpace(modName))
            {
                Snackbar.Add(Lang.GetText("ModNameNull", "LocalModsReligion"), Severity.Error);
                return;
            }
            if(_religions.Contains(modName))
            {
                Snackbar.Add(Lang.GetText("ModNameExists", "LocalModsReligion"), Severity.Error);
                return;
            }
            try 
            {
                var createResult = ReligionModService.CreateReligionMod(modName);
                if (createResult != null)
                {
                    Snackbar.Add(Lang.GetText("CreateSuccess", "LocalModsReligion"), Severity.Success);
                    EventAggregator.GetEvent<ModsChangedEvent>().Publish();
                    NavigationManager.NavigateTo($"/local-mods/religion/{modName}");
                }
                else
                {
                    Snackbar.Add(Lang.GetText("CreateFailed", "LocalModsReligion"), Severity.Error);
                }
            }
            catch (Exception ex)
            {
                Snackbar.Add($"{Lang.GetText("CreateFailed", "LocalModsReligion")}: {ex.Message}", Severity.Error);
            }
            
            

        }
    }

    private async Task DeleteReligion(string modName)
    {
        var parameters = new DialogParameters()
        {
            { "ContentText", $"{Lang.GetText("ConfirmDeleteMessage", "LocalModsReligion")} {modName}? {Lang.GetText("ThisOperationCannotBeRestored", "LocalModsReligion")}" },
            { "ButtonText", Lang.GetText("Delete", "LocalModsReligion") },
            { "Color", Color.Error }
        };

        var dialog = DialogService.Show<ConfirmDialog>($"{Lang.GetText("Delete", "LocalModsReligion")} Mod", parameters);
        var result = await dialog.Result;


        if (!result.Canceled)
        {
            try
            {
                var delReuslt = ReligionModService.DeleteReligionMod(modName);
                if (delReuslt)
                {
                    EventAggregator.GetEvent<ModsChangedEvent>().Publish();
                    _religions.Remove(modName);
                    Snackbar.Add(Lang.GetText("DeleteSuccess", "LocalModsReligion"), Severity.Success);
                }
                else

                {
                    Snackbar.Add(Lang.GetText("DeleteFailed", "LocalModsReligion"), Severity.Error);
                }

            }
            catch (Exception ex)
            {
                Snackbar.Add($"{Lang.GetText("DeleteFailed", "LocalModsReligion")}: {ex.Message}", Severity.Error);
            }


        }
    }
}
